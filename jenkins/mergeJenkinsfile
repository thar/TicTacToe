pipeline {
    agent none 
    stages {
        stage('Checkout') {
            agent any 
            steps {
              checkout poll: false, \
              scm: [$class: 'GitSCM', \
              branches: [[name: "$GERRIT_NEWREV"]], \
              doGenerateSubmoduleConfigurations: false, \
              extensions: [[$class: 'BuildChooserSetting', buildChooser: [$class: 'GerritTriggerBuildChooser']]], \
              submoduleCfg: [], \
              userRemoteConfigs: [[credentialsId: 'jenkins-master', \
              url: "$GERRIT_SCHEME://$GERRIT_HOST:$GERRIT_PORT/$GERRIT_PROJECT"]]]
            }
        }
        stage('Test with video recording') {
            agent any
            steps {
                sh 'docker run --rm -v /tmp/video:/tmp/video alpine sh -c "rm /tmp/video/*.mp4 || true"'
                withEnv(['ENABLE_VIDEO_RECORDING=1']) {
                    sh 'docker-compose -f system-test-docker-compose.yml up --abort-on-container-exit --exit-code-from test'
                }
                sh 'export GID=$(id -g); export UID=$(id -u); docker run --rm -v codeurjc-forge-jenkins-volume:/var/jenkins_home -w "$(pwd)" alpine chown -R $UID:$GID .'
                sh 'docker run --rm -v /tmp/video:/tmp/video:z -w /tmp alpine chmod -R a+rw video'
                sh 'docker run --rm -v /tmp/video:/tmp/video:z -v codeurjc-forge-jenkins-volume:/var/jenkins_home:z -w "$(pwd)" alpine sh -c "mkdir -p video && cp /tmp/video/*.mp4 video/"'
            }
            post {
                success {
                    junit 'target/surefire-reports/**/*.xml'
                    archiveArtifacts artifacts: 'video/*.mp4', onlyIfSuccessful: true
                }
                cleanup {
                    sh 'docker run --rm -v /tmp/video:/tmp/video alpine sh -c "rm /tmp/video/*.mp4 || true"'
                    sh 'rm video/*.mp4 || true'
                }
            }
        }
        stage('Analyze code and publish in SonarQube') {
            agent {
                docker {
                    image 'maven:3-jdk-8-alpine'
                    args  '-v codeurjc-forge-jenkins-volume:/var/jenkins_home:z -w "$(pwd)"'
                }
            }
            steps {
                sh 'mvn sonar:sonar -Dsonar.host.url=http://172.17.0.2:9000'
            }
        }
        stage('Create and deploy package') {
            agent {
                docker {
                    image 'maven:3-jdk-8-alpine'
                    args  '-v codeurjc-forge-jenkins-volume:/var/jenkins_home:z -w "$(pwd)" --network=ci-network'
                }
            }
            steps {
                sh 'mvn package deploy -Dmaven.test.skip=true -Duser.home="$(pwd)"'
            }
        }
        stage('Create docker image') {
            agent any
            steps {
                def dockerfile = 'Dockerfile'
                def customImage = docker.build("thar/TicTacToe:dev", "--build-arg GIT_COMMIT=$(git rev-parse HEAD) --build-arg COMMIT_DATE=$(git log -1 --format=%cd --date=format:%Y-%m-%dT%H:%M:%S) -f ${dockerfile} ./docker")
            }
        }
    }
}

